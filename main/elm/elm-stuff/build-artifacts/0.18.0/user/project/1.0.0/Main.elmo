var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model.score)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(model.name),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			model,
			{ctor: '[]'});
	});
var _user$project$Main$Flags = F2(
	function (a, b) {
		return {score: a, name: b};
	});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {score: a, name: b};
	});
var _user$project$Main$init = function (flags) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		A2(
			_user$project$Main$Model,
			A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$Result$toMaybe(
					_elm_lang$core$String$toInt(flags.score))),
			flags.name),
		{ctor: '[]'});
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (name) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (score) {
					return _elm_lang$core$Json_Decode$succeed(
						{name: name, score: score});
				},
				A2(_elm_lang$core$Json_Decode$field, 'score', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string)));
var _user$project$Main$Noop = {ctor: 'Noop'};
